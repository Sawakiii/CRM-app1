{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","users","setUsers","useEffect","fetch","then","res","json","console","log","data","catch","err","error","handleDelete","id","method","headers","body","JSON","stringify","msg","onSubmit","e","preventDefault","name","target","value","age","email","style","display","type","length","map","index","hasOwnProperty","_id","placeholder","onClick","newUsers","slice","edit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.18bc87d7.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n\nconst App = () => {\n  const [users, setUsers] = React.useState([\n    // {\n    //   name: \"satou\",\n    //   age: 11,\n    //   email: \"satou@gmail.com\"\n    // },\n    // {\n    //   name: \"abe\",\n    //   age: 40,\n    //   email: \"hiroshi@mail.jp\"\n    // }\n  ])\n\n  const handleGet = () => {\n    // サーバと通信できれば良いので、サーバにリクエストを送る。\n    fetch(\"/api/users\")\n    // 非同期処理の関数.then()なら、非同期処理が成功した場合の処理を書く\n    // res(任意)は、サーバから送られるレスポンスが入る。レスポンスの形式のままでは処理できないのでjsonに変換する。\n    .then(res=>res.json())\n    // json形式に変換したレスポンスをコンソールに表示する。\n    .then(res=>{\n      console.log(res)\n      setUsers(res.data)\n    })\n    .catch(err=>{\n      console.error(err)\n    })\n  }\n\n\n  // 以下でレンダリング直後に自動的にデータベースと通信し、データをクライアント側に反映してくれます。\n  React.useEffect(()=>{\n    handleGet()\n  }, [])\n\n\n\n\n\n\n\n\n  const handleDelete = (id) => {\n    \n    // 上記を確かめるために、handleDelete内でidが使用できるか確認。\n    // console.log(id)\n    \n    // サーバにidさえ送ればok\n    fetch(\"/api/users\", {\n      method: \"DELETE\",\n      headers : {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n      },\n      body: JSON.stringify({\n        // 以下でidをサーバ側へ渡す。\n        id: id,\n      })\n    }).then(res=>res.json())\n    .then(res=>{\n      console.log(res.msg)\n      setUsers(res.data)\n    })\n    .catch(err=>console.error(err))\n  }\n\n\n  return (\n    <>\n      <form onSubmit={(e)=>{\n        e.preventDefault()\n        fetch(\"/api/users\", {\n          method: \"POST\",\n          headers : {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n          },\n          body: JSON.stringify({\n            name: e.target.name.value,\n            age: e.target.age.value,\n            email: e.target.email.value,\n          })\n        }).then(res=>res.json())\n        .then(res=>{\n          console.log(res.msg)\n          setUsers(res.data)\n        }).catch(err=>console.error(err))\n      }}>\n        <p style={{display: \"inline-block\"}}>名前 : </p><input type=\"text\" name=\"name\"/><br></br>\n        <p style={{display: \"inline-block\"}}>年齢 : </p><input type=\"number\" name=\"age\" /><br></br>\n        <p style={{display: \"inline-block\"}}>メール : </p><input type=\"email\" name=\"email\"/><br></br>\n        <button type=\"submit\">データ追加</button>\n      </form>\n      { \n        users.length === 0 ? \n        <p>データを追加してください。</p>\n        :\n        users.map((value, index)=>(\n        <>\n        {\n          value.hasOwnProperty(\"edit\") ? \n          <>\n            <p>ユーザ{index + 1}</p>\n            <form onSubmit={(e)=>{\n        e.preventDefault()\n        fetch(\"/api/users\", {\n          method: \"PUT\",\n          headers : {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n          },\n          body: JSON.stringify({\n            id: value._id,\n            name: e.target.name.value,\n            age: e.target.age.value,\n            email: e.target.email.value,\n          })\n        }).then(res=>res.json())\n        .then(res=>{\n          console.log(res.msg)\n          setUsers(res.data)\n        }).catch(err=>console.error(err))\n      }}>\n        <p style={{display: \"inline-block\"}}>名前 : </p><input type=\"text\" name=\"name\" placeholder={value.name} /><br></br>\n        <p style={{display: \"inline-block\"}}>年齢 : </p><input type=\"number\" name=\"age\" placeholder={value.age} /><br></br>\n        <p style={{display: \"inline-block\"}}>メール : </p><input type=\"email\" name=\"email\" placeholder={value.email} /><br></br>\n        <button type=\"submit\">データ編集完了</button>\n      </form>\n          <button onClick={()=>{\n            handleDelete(value._id)\n          }}>このデータを削除する</button>\n          </>\n          :\n          <>\n            <p>ユーザ{index + 1}</p>\n          <p>名前 : {value.name}</p>\n          <p>年齢 : {value.age}</p>\n          <button onClick={()=>{\n            const newUsers = users.slice()\n            newUsers[index].age++\n            setUsers(newUsers)\n          }}>+</button>\n          <button onClick={()=>{\n            const newUsers = users.slice()\n            newUsers[index].age--\n            setUsers(newUsers)\n          }}>-</button>\n          <p>メール : {value.email}</p>\n          <button onClick={()=>{\n            const newUsers = users.slice()\n            newUsers[index].edit = true\n            setUsers(newUsers)\n          }}>このデータを編集する</button><br></br>\n          <button onClick={()=>{\n            handleDelete(value._id)\n          }}>このデータを削除する</button>\n          </>\n        }\n          <hr></hr>\n        </>\n      )) }\n    \n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}